name: Advanced Build and Test ASP.NET Core App

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main
  schedule:
    - cron: '30 11 * * 3,5' 

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Application
        run: |
          mkdir -Force bin/Release 
          dotnet build --configuration Release --no-restore

      - name: Determine Version Tag
        run: |
          $BranchName = "${{ github.ref_name }}".Replace("/", "-")
          $ShortHash = $(git rev-parse --short HEAD)
          $VersionTag = "$BranchName-$ShortHash"
          echo "VERSION_TAG=$VersionTag" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

      - name: Upload Build Artifacts with Versioning
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ env.VERSION_TAG }}
          path: '**/bin/Release/net*/**'

  # test-coverage:
  #   needs: build
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Restore Dependencies
  #       run: dotnet restore

  #     - name: Build Solution
  #       run: dotnet build --configuration Release --no-restore

  #     - name: Run Unit Tests with Code Coverage
  #       run: dotnet test --configuration Release --no-build --collect:"XPlat Code Coverage" --results-directory TestResults
  #       continue-on-error: true

  #     - name: Upload Test Results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: test-results-${{ env.VERSION_TAG }}
  #         path: TestResults
  #         retention-days: 7

  #     - name: Upload Code Coverage Results
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: code-coverage-${{ env.VERSION_TAG }}
  #         path: TestResults/**/coverage.cobertura.xml
          # retention-days: 6

  notify:
    needs: [build,]
    runs-on: self-hosted
    steps:
      - name: Send Email on Success
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "✅ Build & Tests Passed: ${{ github.repository }}"
          to: ${{ secrets.TO_EMAIL }}
          from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            ✅ **Build & Tests Passed for** ${{ github.repository }}
            🔗 **Repository**: ${{ github.repository }}
            🔀 **Branch**: ${{ github.ref }}
            🛠️ **Commit**: ${{ github.sha }}
            📅 **Triggered by**: ${{ github.actor }}

            Check the logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Send Email on Failure
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 Build or Tests Failed: ${{ github.repository }}"
          to: ${{ secrets.TO_EMAIL }}
          from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            🔴 **Build or Tests Failed for** ${{ github.repository }}
            🔗 **Repository**: ${{ github.repository }}
            🔀 **Branch**: ${{ github.ref }}
            🛠️ **Commit**: ${{ github.sha }}
            📅 **Triggered by**: ${{ github.actor }}

            Check the logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
